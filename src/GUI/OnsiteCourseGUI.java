/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package GUI;

import BUS.DepartmentBLL;
import BUS.OnsiteCourseBLL;
import ENTITY.Department;
import ENTITY.OnsiteCourse;
import java.util.ArrayList;
import java.util.Vector;
import javax.swing.DefaultComboBoxModel;
import javax.swing.table.DefaultTableModel;

import java.sql.Time;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author DELL
 */
public class OnsiteCourseGUI extends javax.swing.JPanel {

    /**
     * Creates new form OnsiteCourseGUI
     */
    private ArrayList<OnsiteCourse> listOnsiteCourse;
    private int id;

    public OnsiteCourseGUI() throws Exception {
        initComponents();
        loadListOnsiteCourse();
        loadListCbxDepartment();

//        LocalTime now = LocalTime.now();
//        System.out.println(now);
//        Time time = Time.valueOf(now);
//        Time time1 = Time.valueOf("12:00:00");
//        System.out.println(time);
//
//        OnsiteCourse onsiteCourse = new OnsiteCourse();
//        onsiteCourse.setTime(time);
//        String time = "12:40:35";
//        String[] listItem = time.split("\\:");
//        for (String item : listItem) {
//            System.out.println(item);
//        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        txtNameCourse = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtCredits = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        cbxDepartment = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        txtLocation = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        txtDays = new javax.swing.JTextField();
        txtSearch = new javax.swing.JTextField();
        btnSearch = new javax.swing.JButton();
        btnAdd = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        spinerHour = new javax.swing.JSpinner();
        spinerMinute = new javax.swing.JSpinner();
        btnEdit = new javax.swing.JButton();
        btnReset = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableOnsiteCourse = new javax.swing.JTable();

        setBackground(new java.awt.Color(236, 239, 193));

        jLabel1.setBackground(new java.awt.Color(236, 239, 193));
        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/onsiteCourse (1).png"))); // NOI18N
        jLabel1.setText("ONSITE COURSE");

        jPanel1.setBackground(new java.awt.Color(0, 153, 153));
        jPanel1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel1.setForeground(new java.awt.Color(255, 255, 255));

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Course Title");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Credits");

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Department Name");

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Location");

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Days");

        btnSearch.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/search (1).png"))); // NOI18N
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        btnAdd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/add (1).png"))); // NOI18N
        btnAdd.setText("Add");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnDelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/delete (1).png"))); // NOI18N
        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("Time");

        spinerHour.setModel(new javax.swing.SpinnerNumberModel(0, 0, 24, 1));
        spinerHour.setOpaque(true);

        spinerMinute.setModel(new javax.swing.SpinnerNumberModel(0, 0, 60, 1));

        btnEdit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/edit (1).png"))); // NOI18N
        btnEdit.setText("Edit");
        btnEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditActionPerformed(evt);
            }
        });

        btnReset.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/reset (1).png"))); // NOI18N
        btnReset.setText("Reset");
        btnReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(75, 75, 75)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6))
                .addGap(40, 40, 40)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtNameCourse)
                    .addComponent(txtCredits)
                    .addComponent(cbxDepartment, 0, 197, Short.MAX_VALUE)
                    .addComponent(txtLocation)
                    .addComponent(txtDays))
                .addGap(69, 69, 69)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addGap(18, 18, 18)
                        .addComponent(spinerHour, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(spinerMinute, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnSearch))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnAdd)
                            .addComponent(btnDelete))
                        .addGap(30, 30, 30)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnReset)
                            .addComponent(btnEdit))))
                .addContainerGap(148, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnSearch)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel2)
                        .addComponent(txtNameCourse, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtCredits, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAdd)
                    .addComponent(btnEdit))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(cbxDepartment, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnDelete)
                    .addComponent(btnReset))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(txtLocation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(txtDays, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7)
                    .addComponent(spinerHour, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(spinerMinute, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(27, Short.MAX_VALUE))
        );

        jPanel2.setBackground(new java.awt.Color(0, 153, 153));
        jPanel2.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        tableOnsiteCourse.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        tableOnsiteCourse.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableOnsiteCourseMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tableOnsiteCourse);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(41, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 808, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(47, 47, 47))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 272, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(161, 161, 161))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(328, 328, 328)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 290, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    // Click 1 dòng trong table
    private void tableOnsiteCourseMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableOnsiteCourseMouseClicked
        int row = tableOnsiteCourse.getSelectedRow();
        id = Integer.parseInt(tableOnsiteCourse.getValueAt(row, 1).toString());
        String courseTitle = tableOnsiteCourse.getValueAt(row, 2).toString();
        String credits = tableOnsiteCourse.getValueAt(row, 3).toString();
        String nameDepart = tableOnsiteCourse.getValueAt(row, 4).toString();
        String location = tableOnsiteCourse.getValueAt(row, 5).toString();
        String days = tableOnsiteCourse.getValueAt(row, 6).toString();
        String time = tableOnsiteCourse.getValueAt(row, 7).toString();

        String[] listItem = time.split("\\:");
        int hour = Integer.parseInt(listItem[0]);
        int minute = Integer.parseInt(listItem[1]);

        txtNameCourse.setText(courseTitle);
        txtCredits.setText(credits);
        txtLocation.setText(location);
        txtDays.setText(days);
        spinerHour.setValue(hour);
        spinerMinute.setValue(minute);

        int i = 0;
        Department depart;
        while (true) {
            depart = (Department) cbxDepartment.getItemAt(i);
            if (depart.getName().equalsIgnoreCase(nameDepart)) {
                cbxDepartment.setSelectedIndex(i);
                break;
            }
            i++;
        }
    }//GEN-LAST:event_tableOnsiteCourseMouseClicked

    // add
    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        if (txtNameCourse.getText().toString().isEmpty() 
                || txtCredits.getText().isEmpty() || txtLocation.getText().toString().isEmpty() || txtDays.getText().toString().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Vui lòng điền đầy đủ thông tin khóa học", "Thông báo", JOptionPane.INFORMATION_MESSAGE);
        } else {
            Department depart = (Department) cbxDepartment.getSelectedItem();
            int departmentID = depart.getDepartmentID();
            int hour = (int) spinerHour.getValue();
            int minute = (int) spinerMinute.getValue();
            Time time = Time.valueOf(String.valueOf(hour) + ":" + String.valueOf(minute) + ":00");

            OnsiteCourse onsiteCourse = new OnsiteCourse();
            onsiteCourse.setTitle(txtNameCourse.getText().toString());
            onsiteCourse.setCredits(Integer.parseInt(txtCredits.getText()));
            onsiteCourse.setLocation(txtLocation.getText().toString());
            onsiteCourse.setDays(txtDays.getText().toString());
            onsiteCourse.setDepartmentID(departmentID);
            onsiteCourse.setTime(time);

            try {
                if (OnsiteCourseBLL.addOnsiteCourse(onsiteCourse)) {
                    JOptionPane.showMessageDialog(this, "Thêm khóa học onsite thành công", "Thông báo", JOptionPane.INFORMATION_MESSAGE);
                    txtNameCourse.setText("");
                    txtCredits.setText("");
                    txtLocation.setText("");
                    txtDays.setText("");
                    spinerHour.setValue(0);
                    spinerMinute.setValue(0);
                    try {
                        loadListOnsiteCourse();
                    } catch (Exception ex) {
                        Logger.getLogger(OnsiteCourseGUI.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            } catch (Exception ex) {
                Logger.getLogger(OnsiteCourseGUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        }


    }//GEN-LAST:event_btnAddActionPerformed

    // Delete
    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        if (txtNameCourse.getText().toString().isEmpty() && txtCredits.getText().isEmpty() && txtLocation.getText().toString().isEmpty() 
                || txtDays.getText().toString().isEmpty()) {
        } else {
            int x = JOptionPane.showConfirmDialog(this, "Bạn có chắc muốn xóa hay không?");
            if (x == JOptionPane.YES_OPTION) {
                try {
                    if (OnsiteCourseBLL.deleteOnsiteCourseByID(id)) {
                        txtNameCourse.setText("");
                        txtCredits.setText("");
                        txtLocation.setText("");
                        txtDays.setText("");
                        spinerHour.setValue(0);
                        spinerMinute.setValue(0);
                        try {
                            loadListOnsiteCourse();
                        } catch (Exception ex) {
                            Logger.getLogger(OnsiteCourseGUI.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                } catch (Exception ex) {
                    Logger.getLogger(OnsiteCourseGUI.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    // Reset
    private void btnResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetActionPerformed
        txtNameCourse.setText("");
        txtCredits.setText("");
        txtLocation.setText("");
        txtDays.setText("");
        spinerHour.setValue(0);
        spinerMinute.setValue(0);
    }//GEN-LAST:event_btnResetActionPerformed

    // Update
    private void btnEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditActionPerformed
        if (txtNameCourse.getText().toString().isEmpty() 
                || txtCredits.getText().isEmpty()
                || txtLocation.getText().toString().isEmpty() || txtDays.getText().toString().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Vui lòng điền đầy đủ thông tin khóa học", "Thông báo", JOptionPane.INFORMATION_MESSAGE);
        } else {
            Department depart = (Department) cbxDepartment.getSelectedItem();
            int departmentID = depart.getDepartmentID();
            int hour = (int) spinerHour.getValue();
            int minute = (int) spinerMinute.getValue();
            Time time = Time.valueOf(String.valueOf(hour) + ":" + String.valueOf(minute) + ":00");

            OnsiteCourse onsiteCourse = new OnsiteCourse();
            onsiteCourse.setTitle(txtNameCourse.getText().toString());
            onsiteCourse.setCredits(Integer.parseInt(txtCredits.getText()));
            onsiteCourse.setLocation(txtLocation.getText().toString());
            onsiteCourse.setDays(txtDays.getText().toString());
            onsiteCourse.setDepartmentID(departmentID);
            onsiteCourse.setTime(time);
            try {
                if (OnsiteCourseBLL.updateOnsiteCourseByID(id, onsiteCourse)) {
                    JOptionPane.showMessageDialog(this, "Cập nhật thành công", "Thông báo", JOptionPane.INFORMATION_MESSAGE);
                    loadListOnsiteCourse();
                }
            } catch (Exception ex) {
                Logger.getLogger(OnsiteCourseGUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        }


    }//GEN-LAST:event_btnEditActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        String keyWordSearch = txtSearch.getText().toString();
        try {
            ArrayList<OnsiteCourse> listOnsiteCourseSearch = OnsiteCourseBLL.searchByNameCourse(keyWordSearch);
            loadListOnsiteCourseSearch(listOnsiteCourseSearch);
        } catch (Exception ex) {
            Logger.getLogger(OnsiteCourseGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnSearchActionPerformed

    // Load list OnsiteCourse Search
    private void loadListOnsiteCourseSearch(ArrayList<OnsiteCourse> listOnsiteCourseSearch) throws Exception {
        DefaultTableModel model = (DefaultTableModel) tableOnsiteCourse.getModel();

        // Xoá dữ liệu đang có trong table
        model.setRowCount(0);

        Vector<Object> header = new Vector<>();
        header.add("STT");
        header.add("CourseID");
        header.add("Course Title");
        header.add("Credits");
        header.add("Department Name");
        header.add("Location");
        header.add("Days");
        header.add("Time");

        if (model.getRowCount() == 0) {
            model = new DefaultTableModel(header, 0);
        }

        int i = 0;
        for (OnsiteCourse onsiteCourse : listOnsiteCourseSearch) {
            Vector<Object> vec = new Vector<>();
            vec.add(i);
            vec.add(onsiteCourse.getCourseID());
            vec.add(onsiteCourse.getTitle());
            vec.add(onsiteCourse.getCredits());
            vec.add(getNameDepartByID(onsiteCourse.getDepartmentID()));
            vec.add(onsiteCourse.getLocation());
            vec.add(onsiteCourse.getDays());
            vec.add(onsiteCourse.getTime());
            i++;
            model.addRow(vec);
        }
        tableOnsiteCourse.setModel(model);
    }

    // Load list OnsiteCourse
    private void loadListOnsiteCourse() throws Exception {
        listOnsiteCourse = OnsiteCourseBLL.getAllOnsiteCourse();
        DefaultTableModel model = (DefaultTableModel) tableOnsiteCourse.getModel();
        model.setRowCount(0);
        Vector<Object> header = new Vector<>();
        header.add("STT");
        header.add("CourseID");
        header.add("Course Title");
        header.add("Credits");
        header.add("Department Name");
        header.add("Location");
        header.add("Days");
        header.add("Time");
        if (model.getRowCount() == 0) {
            model = new DefaultTableModel(header, 0);
        }
        int i = 0;
        for (OnsiteCourse onsiteCourse : listOnsiteCourse) {
            Vector<Object> vec = new Vector<>();
            vec.add(i);
            vec.add(onsiteCourse.getCourseID());
            vec.add(onsiteCourse.getTitle());
            vec.add(onsiteCourse.getCredits());
            vec.add(getNameDepartByID(onsiteCourse.getDepartmentID()));
            vec.add(onsiteCourse.getLocation());
            vec.add(onsiteCourse.getDays());
            vec.add(onsiteCourse.getTime());
            i++;
            model.addRow(vec);
        }
        tableOnsiteCourse.setModel(model);
    }

    private String getNameDepartByID(int id) throws Exception {
        return DepartmentBLL.getNameDepartByID(id);
    }

    // load list departmentName to cbx
    private void loadListCbxDepartment() throws Exception {
        ArrayList<Department> listDepartment = DepartmentBLL.getAllDepartment();
        DefaultComboBoxModel model = (DefaultComboBoxModel) cbxDepartment.getModel();

        for (Department depart : listDepartment) {
            model.addElement(depart);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnEdit;
    private javax.swing.JButton btnReset;
    private javax.swing.JButton btnSearch;
    private javax.swing.JComboBox<Department> cbxDepartment;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSpinner spinerHour;
    private javax.swing.JSpinner spinerMinute;
    private javax.swing.JTable tableOnsiteCourse;
    private javax.swing.JTextField txtCredits;
    private javax.swing.JTextField txtDays;
    private javax.swing.JTextField txtLocation;
    private javax.swing.JTextField txtNameCourse;
    private javax.swing.JTextField txtSearch;
    // End of variables declaration//GEN-END:variables
}
