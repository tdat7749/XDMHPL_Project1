/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package GUI;

import BUS.CourseBLL;
import BUS.CourseInstructorBLL;
import BUS.LectureBLL;
import ENTITY.Course;
import ENTITY.CourseInstructor;
import ENTITY.Lecture;
import java.util.ArrayList;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author DELL
 */
public class CourseInstructorGUI extends javax.swing.JPanel {

    /**
     * Creates new form CourseInstructorGUI
     */
    private ArrayList<CourseInstructor> listCourseInstructor;
    private int courseID;
    private int lectureID;

    public CourseInstructorGUI() throws Exception {
        initComponents();
        loadListCourseInstructor();
        loadListCbxLecture();
        loadListCbxCourse();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        cbxCourse = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        txtSearch = new javax.swing.JTextField();
        btnSearch = new javax.swing.JButton();
        btnAdd = new javax.swing.JButton();
        btnEdit = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        cbxLecture = new javax.swing.JComboBox<>();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableCourseInstructor = new javax.swing.JTable();

        setBackground(new java.awt.Color(236, 239, 193));

        jLabel1.setBackground(new java.awt.Color(236, 239, 193));
        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/instructorCourse (1).png"))); // NOI18N
        jLabel1.setText(" COURSE INSTRUCTOR");

        jPanel1.setBackground(new java.awt.Color(0, 153, 153));
        jPanel1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Course Title");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Lecture");

        btnSearch.setIcon(new javax.swing.ImageIcon("C:\\Users\\Khoa\\Documents\\NetBeansProjects\\XDMHPL_Project1-main\\Image\\search (1).png")); // NOI18N
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        btnAdd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/add (1).png"))); // NOI18N
        btnAdd.setText("Add");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnEdit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/edit (1).png"))); // NOI18N
        btnEdit.setText("Edit");
        btnEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditActionPerformed(evt);
            }
        });

        btnDelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/delete (1).png"))); // NOI18N
        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(93, 93, 93)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(cbxCourse, 0, 182, Short.MAX_VALUE)
                    .addComponent(cbxLecture, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(89, 89, 89)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnSearch))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(btnAdd)
                        .addGap(18, 18, 18)
                        .addComponent(btnEdit)
                        .addGap(18, 18, 18)
                        .addComponent(btnDelete)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(cbxCourse, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearch))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAdd)
                    .addComponent(btnEdit)
                    .addComponent(jLabel3)
                    .addComponent(cbxLecture, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnDelete))
                .addContainerGap(32, Short.MAX_VALUE))
        );

        jPanel2.setBackground(new java.awt.Color(0, 153, 153));
        jPanel2.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        tableCourseInstructor.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        tableCourseInstructor.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableCourseInstructorMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tableCourseInstructor);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 791, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(32, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 341, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(17, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(268, 268, 268)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 329, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    // Click 1 dong trong table
    private void tableCourseInstructorMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableCourseInstructorMouseClicked
        int row = tableCourseInstructor.getSelectedRow();
        courseID = Integer.parseInt(tableCourseInstructor.getValueAt(row, 1).toString());
        String courseTitle = tableCourseInstructor.getValueAt(row, 2).toString();
        String nameLecture = tableCourseInstructor.getValueAt(row, 3).toString();

        int i = 0;
        Course course;
        while (true) {
            course = (Course) cbxCourse.getItemAt(i);
            if (course.getTitle().equalsIgnoreCase(courseTitle)) {
                cbxCourse.setSelectedIndex(i);
                break;
            }
            i++;
        }
        i = 0;
        Lecture lecture;
        while (true) {
            lecture = (Lecture) cbxLecture.getItemAt(i);
            if ((lecture.getFirstName() + " " + lecture.getLastName()).equalsIgnoreCase(nameLecture)) {
                cbxLecture.setSelectedIndex(i);
                lectureID = lecture.getPersonID();
                break;
            }
            i++;
        }
    }//GEN-LAST:event_tableCourseInstructorMouseClicked

    // Add
    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        Lecture lecture = (Lecture) cbxLecture.getSelectedItem();
        int lectureID = lecture.getPersonID();
        Course course = (Course) cbxCourse.getSelectedItem();
        int courseID = course.getCourseID();

        CourseInstructor courseInstructor = new CourseInstructor();
        courseInstructor.setCourseID(courseID);
        courseInstructor.setPersonID(lectureID);
        
        try {
            if (CourseInstructorBLL.addCourseInstructor(courseInstructor)) {
                JOptionPane.showMessageDialog(this, "Thêm thành công", "Thông báo", JOptionPane.INFORMATION_MESSAGE);
                loadListCourseInstructor();
            }
        } catch (Exception ex) {
            Logger.getLogger(CourseInstructorGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnAddActionPerformed

    // Edit
    private void btnEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditActionPerformed
        Lecture lecture = (Lecture) cbxLecture.getSelectedItem();
        int lectureIDupdate = lecture.getPersonID();
        Course course = (Course) cbxCourse.getSelectedItem();
        int courseIDupdate = course.getCourseID();

        CourseInstructor courseInstructor = new CourseInstructor();
        courseInstructor.setCourseID(courseIDupdate);
        courseInstructor.setPersonID(lectureIDupdate);

        try {
            if (CourseInstructorBLL.updateCourseInstructorByID(courseID, lectureID, courseInstructor)) {
                JOptionPane.showMessageDialog(this, "Cập nhật thành công", "Thông báo", JOptionPane.INFORMATION_MESSAGE);
                loadListCourseInstructor();
            }
        } catch (Exception ex) {
            Logger.getLogger(CourseInstructorGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnEditActionPerformed

    // Delete
    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        int x = JOptionPane.showConfirmDialog(this, "Bạn có chắc muốn xóa hay không?");
        if (x == JOptionPane.YES_OPTION) {
            try {
                if (CourseInstructorBLL.deleteCourseInstructorByID(courseID, lectureID)) {
                    JOptionPane.showMessageDialog(this, "Xóa thành công", "Thông báo", JOptionPane.INFORMATION_MESSAGE);
                    loadListCourseInstructor();
                }
            } catch (Exception ex) {
                Logger.getLogger(CourseInstructorGUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    // Search
    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        String keyWordSearch = txtSearch.getText().toString();
        try {
            ArrayList<CourseInstructor> listCourseInstructorSearch = CourseInstructorBLL.searchCourseInstructorByNameLecture(keyWordSearch);
            loadListCourseInstructorSearch(listCourseInstructorSearch);
        } catch (Exception ex) {
            Logger.getLogger(CourseInstructorGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnSearchActionPerformed

    // load list CourseInstructor Search to table
    private void loadListCourseInstructorSearch(ArrayList<CourseInstructor> listCourseInstructorSearch) throws Exception {
        DefaultTableModel model = (DefaultTableModel) tableCourseInstructor.getModel();

        // Xoá dữ liệu đang có trong table
        model.setRowCount(0);

        Vector<Object> header = new Vector<>();
        header.add("STT");
        header.add("Course ID");
        header.add("Course Title");
        header.add("Lecture Name");

        if (model.getRowCount() == 0) {
            model = new DefaultTableModel(header, 0);
        }

        int i = 0;
        for (CourseInstructor courseInstructor : listCourseInstructorSearch) {
            Vector<Object> vec = new Vector<>();
            vec.add(i);
            vec.add(courseInstructor.getCourseID());
            vec.add(getNameCourseByID(courseInstructor.getCourseID()));
            vec.add(getNameLectureByID(courseInstructor.getPersonID()));
            i++;
            model.addRow(vec);
        }
        tableCourseInstructor.setModel(model);
    }

    // load list CourseInstructor to table
    private void loadListCourseInstructor() throws Exception {
        listCourseInstructor = CourseInstructorBLL.getAllCourseInstructor();
        DefaultTableModel model = (DefaultTableModel) tableCourseInstructor.getModel();

        // Xoá dữ liệu đang có trong table
        model.setRowCount(0);

        Vector<Object> header = new Vector<>();
        header.add("STT");
        header.add("Course ID");
        header.add("Course Title");
        header.add("Lecture Name");

        if (model.getRowCount() == 0) {
            model = new DefaultTableModel(header, 0);
        }

        int i = 0;
        for (CourseInstructor courseInstructor : listCourseInstructor) {
            Vector<Object> vec = new Vector<>();
            vec.add(i);
            vec.add(courseInstructor.getCourseID());
            vec.add(getNameCourseByID(courseInstructor.getCourseID()));
            vec.add(getNameLectureByID(courseInstructor.getPersonID()));
            i++;
            model.addRow(vec);
        }
        tableCourseInstructor.setModel(model);
    }

    // load listLecture to cbxLecture
    private void loadListCbxLecture() throws Exception {
        ArrayList<Lecture> listLecture = LectureBLL.getAllLecture();
        DefaultComboBoxModel model = (DefaultComboBoxModel) cbxLecture.getModel();
        for (Lecture lecture : listLecture) {
            model.addElement(lecture);
        }
    }

    // load listCourse to cbxCourse
    private void loadListCbxCourse() throws Exception {
        ArrayList<Course> listCourse = CourseBLL.getAllCourse();
        DefaultComboBoxModel model = (DefaultComboBoxModel) cbxCourse.getModel();
        for (Course course : listCourse) {
            model.addElement(course);
        }
    }

    // getNameCourseByID
    private String getNameCourseByID(int id) throws Exception {
        return CourseBLL.getNameCourseByID(id);
    }

    // getNameLectureByID
    private String getNameLectureByID(int id) throws Exception {
        return LectureBLL.getNameLectureByID(id);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnEdit;
    private javax.swing.JButton btnSearch;
    private javax.swing.JComboBox<Course> cbxCourse;
    private javax.swing.JComboBox<Lecture> cbxLecture;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tableCourseInstructor;
    private javax.swing.JTextField txtSearch;
    // End of variables declaration//GEN-END:variables
}
